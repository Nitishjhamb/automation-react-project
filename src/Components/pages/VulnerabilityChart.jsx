import React, { useEffect, useState } from "react";
import snykReport from "../../../client/public/snyk-report.json";
import trivyReport from "../../../client/public/trivy-report.json";
import sonarReport from "../../../client/public/sonarqube-report.json";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { Card } from "../ui/Card";

const parseSeverity = (list, tool = "snyk") => {
  const severityMap = {
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
  };

  list.forEach((vuln) => {
    let severity =
      tool === "snyk"
        ? vuln.severity
        : tool === "trivy"
        ? vuln.Severity?.toLowerCase()
        : null;
    if (severityMap.hasOwnProperty(severity)) {
      severityMap[severity]++;
    }
  });

  return severityMap;
};

const VulnerabilityChart = () => {
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    const snykSeverities = parseSeverity(snykReport.vulnerabilities, "snyk");
    const trivySeverities = parseSeverity(
      trivyReport.Results?.[0]?.Vulnerabilities || [],
      "trivy"
    );

    const sonarSeverities = sonarReport.issues.reduce(
      (acc, issue) => {
        const severity = issue.severity?.toLowerCase();
        if (severity === "blocker" || severity === "critical") acc.critical++;
        else if (severity === "major") acc.high++;
        else if (severity === "minor") acc.medium++;
        else if (severity === "info") acc.low++;
        return acc;
      },
      { critical: 0, high: 0, medium: 0, low: 0 }
    );

    const data = [
      {
        name: "Critical",
        Snyk: snykSeverities.critical,
        Trivy: trivySeverities.critical,
        SonarQube: sonarSeverities.critical,
      },
      {
        name: "High",
        Snyk: snykSeverities.high,
        Trivy: trivySeverities.high,
        SonarQube: sonarSeverities.high,
      },
      {
        name: "Medium",
        Snyk: snykSeverities.medium,
        Trivy: trivySeverities.medium,
        SonarQube: sonarSeverities.medium,
      },
      {
        name: "Low",
        Snyk: snykSeverities.low,
        Trivy: trivySeverities.low,
        SonarQube: sonarSeverities.low,
      },
    ];

    setChartData(data);
  }, []);

  return (
    <Card>
      <div className="p-6 bg-white dark:bg-gray-950 rounded-2xl max-w-6xl mx-auto">
        <h2 className="text-xl font-bold mb-4">Vulnerability Severity</h2>
        <ResponsiveContainer width="100%" height={350}>
          <LineChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis allowDecimals={false} />
            <Tooltip />
            <Legend />
            <Line
              type="monotone"
              dataKey="Snyk"
              stroke="#3b82f6"
              strokeWidth={2}
            />
            <Line
              type="monotone"
              dataKey="Trivy"
              stroke="#f59e0b"
              strokeWidth={2}
            />
            <Line
              type="monotone"
              dataKey="SonarQube"
              stroke="#10b981"
              strokeWidth={2}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </Card>
  );
};

export default VulnerabilityChart;
